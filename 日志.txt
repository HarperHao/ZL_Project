2020.12.8
```markdown 

1.设置表单功能
    a.创建表单类，继承自wtforms.Form类
    b.在表单类中定义表单的若干字段，并设置验证器validators；并自定义错误message信息
    c.使用表单类
        *实例化表单类对象，传入request.form
        *验证表单。form.validate()
        *获取传入到后端的表单数据。form.字段名.data
        *获取错误信息。from.字段名.errors 返回一个错误列表
        *将错误信息显示在模版中
            *if message....

2.设置session（remember me）
    a.设置session的key(session通过一个密钥对数据进行签名以加密数据)
        *SECRET_KEY
    b.设置session中cookie的保存时间
        *启动session 
        *`app.config['PERMANENT_SESSION_LIFETIME']=timedelta(hours=2)`
    c.优化session的key
        *将key用一个常量来保存，这个常量储存在config.py中

3.用户权限认证
    *写一个login_required(func)函数，把它注册到index方法上面
        *如果CMS_USER_ID在session里则返回函数
        *否则重定向到登录页面

4.后台模版渲染完成
    *使用模版的宏
        """
        #_macros.html
            {% macro 函数名(参数) %}
                函数体
            {% endmacro %}

        #base.html
            {from "_macros.html" import 函数名}
        """

```

2020.12.9
```markdown
1.设置g对象,用于管理员的名字和之后的一系列处理
    *使用@befor_request钩子函数设置g对象
    *session里面有当前用户的user_id（当初设置的时候把user_id设置成key了），根据user_id找到用户
    *将登录用户绑定到g对象的cms_user属性上去。
2.实现登出功能
    *首先要进行用户权限认证
    *删除session
    *重定向到登录页面

3.实现各个页面的前端
    *模板
        *模板继承 {% extends 'base.html'%} 
        *模板重写 {% block block.name %} {% endblock %}
        *在一个bolock里面调用另一个block的内容 {{ self.block.name()}}
        *在模板里面设置变量 {% set 变量名 = xxxx %}
    *个人信息页面
        *render_template('profile.html')
    *修改密码页面
        *前端
            *ajax
        *后台功能
            *表单post验证
            *优化form类
4.表单的CSRF保护
    from flask_wtf.csrf import CSRFProtect
    CSRFProtect(app)
```

2020.12.10
```markdown
1.复习巩固12.9的知识

2.修复点击个人中心下拉菜单无法展开的bug

3.json数据优化
    *创建工具包
    *使用jsonify()传输数据

4.sweetalert框架
    *导入css和js文件
    *在resetpwd.js文件中编写js代码

5.整理修改密码页面代码
    *让页面显示出三个表单来（get）
        *html a标签的href属性链接到对应的后端代码上，后端代码返回渲染好的html。
        用bootstarp提供的表单模板去写这些表单。
    *Ajax设置CSRF保护
        *后端中设置CSRFProtect(app)
        *html表单中的<meta>标签中设置一个CSRF令牌
    *发送数据（post）
        *后端接受数据
            *表单验证，创建一个类
            *获取数据，form.字段名.data
        *验证数据
            *验证发送上来的数据是否符合定义的表单验证器
            *验证输入的原始密码是否正确
                *利用g对象来获取当前用户，进而来判断密码正确与否
        ＊根据验证的结果向前台发送规范的json数据
            *将各种验证情况的方法封装好,使用jsonify()
        *sweetalert
            *前台根据返回回来的code弹出合适的sweetalert在js文件里面编写
```